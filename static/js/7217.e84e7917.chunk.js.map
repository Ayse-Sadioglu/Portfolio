{"version":3,"file":"static/js/7217.e84e7917.chunk.js","mappings":"4IACO,MAAMA,EACTC,WAAAA,CAAYC,EAAQC,GAChBC,KAAKD,UAAYA,EACjBC,KAAKC,QAAUH,EACfE,KAAKE,MAAQ,GACbF,KAAKG,SAAW,GAChBH,KAAKI,sBAAwB,CACzBC,OAAQ,CACJC,MAAO,EACPC,QAAQ,GAEZC,MAAO,IAGXT,EAAUU,WAAcC,QAA4BC,IAAdD,IAA2BE,EAAAA,EAAAA,IAASF,GACpEV,KAAKE,MAAe,OAATQ,QAAS,IAATA,EAAAA,EAFI,GAGfV,KAAKE,MAAMW,MAAMC,GAAMA,EAAEC,OAASL,IACxCX,EAAUiB,WAAaC,MAAOC,EAASC,IAAanB,KAAKgB,WAAWE,EAASC,GAC7EpB,EAAUqB,cAAiBV,IACvB,MAAMW,EAAUtB,EAAUU,WAAWC,GACjCW,GACArB,KAAKoB,cAAcC,EACvB,EAEJtB,EAAUuB,YAAeZ,IACrB,MAAMW,EAAUtB,EAAUU,WAAWC,GACjCW,GACAA,EAAQE,cACZ,EAEJxB,EAAUyB,aAAgBd,IACtB,MAAMW,EAAUtB,EAAUU,WAAWC,GACjCW,GACAA,EAAQI,eACZ,CAER,CACA,gBAAMT,CAAWE,EAASC,GACtB,MAAM,QAAEO,SAAkB,wCAAwC,gBAAEC,SAA0B,+BAAgCC,EAAiB,IAAIF,EACnJE,EAAeC,KAAKX,GACpB,MAAMG,EAAU,IAAIM,EAAgB3B,KAAKC,QAASD,KAAMA,KAAKD,UAAW6B,EAAgBT,GAGxF,aAFME,EAAQS,OACd9B,KAAKE,MAAM6B,KAAKV,GACTA,CACX,CACAW,eAAAA,CAAgBC,GAAM,IAAAC,EAClB,MAAMN,EAAiB5B,KAAKG,SAAUgC,EAAenC,KAAKI,sBAC1D,GAAa,YAAT6B,EACA,OAEJ,IAAIG,EACJ,GAAID,IAAgBE,EAAAA,EAAAA,IAAQF,EAAa3B,OAAQ,CAC7C,MAAM8B,EAAY,EAClB,GAAIH,EAAa3B,MAAM+B,OAASD,GAAaH,EAAa9B,OAAOE,OAAQ,CACrE6B,EAAsB,GACtB,MAAMI,EAAc,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAa9B,OAAOC,MAAOmC,IAAK,CAChD,MAAMC,GAAMC,EAAAA,EAAAA,IAAiBR,EAAa3B,OACtCgC,EAAYI,SAASF,IAAQF,EAAYD,OAASJ,EAAa3B,MAAM+B,OACrEE,KAGJD,EAAYT,KAAKW,GACjBN,EAAoBL,MAAKc,EAAAA,EAAAA,IAAcV,EAAa3B,MAAOkC,IAC/D,CACJ,MAEIN,EAAsBD,EAAa3B,KAE3C,MAEI4B,EAAkC,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAc3B,MAExC,MAAMsC,EAAqC,QAAtBZ,EAAGE,SAAmB,IAAAF,EAAAA,EAAIN,EAAgBmB,EAAY/C,KAAKD,UAAUiD,cAAcC,MAAMC,eACzGC,EAAAA,EAAAA,IAA0BL,GAAiB7B,gBACtCjB,KAAKgB,WAAWK,EAAS0B,EAAU,GAEjD,CACA,UAAMjB,GAGF,GAFA9B,KAAKG,SAAWH,KAAKD,UAAUqD,cAAcjD,SAC7CH,KAAKI,sBAAwBJ,KAAKD,UAAUqD,cAAcJ,cAAcK,MAAMlD,SACzEH,KAAKG,SAGV,IAAIkC,EAAAA,EAAAA,IAAQrC,KAAKG,UACb,IAAK,MAAMyB,KAAkB5B,KAAKG,eACxBH,KAAKgB,WAAWY,cAIpB5B,KAAKgB,WAAWhB,KAAKG,SAEnC,CACAmD,KAAAA,GACI,IAAK,MAAMjC,KAAWrB,KAAKE,MACvBmB,EAAQiC,OAEhB,CACAC,IAAAA,GACI,IAAK,MAAMlC,KAAWrB,KAAKE,MACvBmB,EAAQkC,MAEhB,CACAnC,aAAAA,CAAcC,GACV,MAAMmC,EAAQxD,KAAKE,MAAMuD,QAAQpC,GAC7BmC,GADkD,GAElDxD,KAAKE,MAAMwD,OAAOF,EAFiD,EAI3E,CACAG,MAAAA,GACI,IAAK,MAAMtC,KAAWrB,KAAKE,MACvBmB,EAAQsC,QAEhB,CACAC,IAAAA,GACI5D,KAAKE,MAAQ,EACjB,CACA2D,MAAAA,CAAOC,GACH,IAAK,MAAMzC,KAAWrB,KAAKE,MACvBmB,EAAQwC,OAAOC,EAEvB,E","sources":["../node_modules/@tsparticles/plugin-emitters/browser/Emitters.js"],"sourcesContent":["import { arrayRandomIndex, executeOnSingleOrMultiple, isArray, isNumber, itemFromArray, } from \"@tsparticles/engine\";\nexport class Emitters {\n    constructor(engine, container) {\n        this.container = container;\n        this._engine = engine;\n        this.array = [];\n        this.emitters = [];\n        this.interactivityEmitters = {\n            random: {\n                count: 1,\n                enable: false,\n            },\n            value: [],\n        };\n        const defaultIndex = 0;\n        container.getEmitter = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addEmitter = async (options, position) => this.addEmitter(options, position);\n        container.removeEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                this.removeEmitter(emitter);\n            }\n        };\n        container.playEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPlay();\n            }\n        };\n        container.pauseEmitter = (idxOrName) => {\n            const emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n                emitter.externalPause();\n            }\n        };\n    }\n    async addEmitter(options, position) {\n        const { Emitter } = await import(\"./Options/Classes/Emitter.js\"), { EmitterInstance } = await import(\"./EmitterInstance.js\"), emitterOptions = new Emitter();\n        emitterOptions.load(options);\n        const emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n        await emitter.init();\n        this.array.push(emitter);\n        return emitter;\n    }\n    handleClickMode(mode) {\n        const emitterOptions = this.emitters, modeEmitters = this.interactivityEmitters;\n        if (mode !== \"emitter\") {\n            return;\n        }\n        let emittersModeOptions;\n        if (modeEmitters && isArray(modeEmitters.value)) {\n            const minLength = 0;\n            if (modeEmitters.value.length > minLength && modeEmitters.random.enable) {\n                emittersModeOptions = [];\n                const usedIndexes = [];\n                for (let i = 0; i < modeEmitters.random.count; i++) {\n                    const idx = arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                        i--;\n                        continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(itemFromArray(modeEmitters.value, idx));\n                }\n            }\n            else {\n                emittersModeOptions = modeEmitters.value;\n            }\n        }\n        else {\n            emittersModeOptions = modeEmitters?.value;\n        }\n        const emittersOptions = emittersModeOptions ?? emitterOptions, ePosition = this.container.interactivity.mouse.clickPosition;\n        void executeOnSingleOrMultiple(emittersOptions, async (emitter) => {\n            await this.addEmitter(emitter, ePosition);\n        });\n    }\n    async init() {\n        this.emitters = this.container.actualOptions.emitters;\n        this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n        if (!this.emitters) {\n            return;\n        }\n        if (isArray(this.emitters)) {\n            for (const emitterOptions of this.emitters) {\n                await this.addEmitter(emitterOptions);\n            }\n        }\n        else {\n            await this.addEmitter(this.emitters);\n        }\n    }\n    pause() {\n        for (const emitter of this.array) {\n            emitter.pause();\n        }\n    }\n    play() {\n        for (const emitter of this.array) {\n            emitter.play();\n        }\n    }\n    removeEmitter(emitter) {\n        const index = this.array.indexOf(emitter), minIndex = 0, deleteCount = 1;\n        if (index >= minIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const emitter of this.array) {\n            emitter.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n    update(delta) {\n        for (const emitter of this.array) {\n            emitter.update(delta);\n        }\n    }\n}\n"],"names":["Emitters","constructor","engine","container","this","_engine","array","emitters","interactivityEmitters","random","count","enable","value","getEmitter","idxOrName","undefined","isNumber","find","t","name","addEmitter","async","options","position","removeEmitter","emitter","playEmitter","externalPlay","pauseEmitter","externalPause","Emitter","EmitterInstance","emitterOptions","load","init","push","handleClickMode","mode","_emittersModeOptions","modeEmitters","emittersModeOptions","isArray","minLength","length","usedIndexes","i","idx","arrayRandomIndex","includes","itemFromArray","emittersOptions","ePosition","interactivity","mouse","clickPosition","executeOnSingleOrMultiple","actualOptions","modes","pause","play","index","indexOf","splice","resize","stop","update","delta"],"sourceRoot":""}