{"version":3,"file":"static/js/6527.86477246.chunk.js","mappings":"0KAGA,SAASA,EAAuBC,EAAUC,GACtC,OAAOD,EAAWC,IAAUC,EAAAA,EAAAA,MAAcC,EAAAA,GAC9C,CACO,MAAMC,UAA4BC,EAAAA,EACrCC,WAAAA,CAAYN,EAAUO,EAAMC,EAAMC,GAC9BC,MAAMV,EAAUO,EAAMC,EAAMC,EAChC,CACA,UAAME,GACN,CACAC,cAAAA,GACI,MAAMJ,EAAOK,KAAKL,KAAMR,EAAWa,KAAKb,SAAUO,EAAOM,KAAKN,KAC9D,GAAIC,EACA,MAAO,CACHR,SAAU,CACNc,EAAGf,EAAuBC,EAASc,EAAGP,EAAKQ,OAC3CC,EAAGjB,EAAuBC,EAASgB,EAAGT,EAAKU,UAIlD,CACD,MAAMC,EArBL,GAqBaX,EAAKQ,MAAcI,EArBhC,GAqBwCZ,EAAKU,OAAeG,EAAOC,KAAKC,MArB3D,GAqBiEpB,EAAAA,EAAAA,OAAsBqB,EArB3E,IAqBgFrB,EAAAA,EAAAA,MAAcC,EAAAA,IACxH,OAAQiB,GACJ,KAAK,EACD,MAAO,CACHpB,SAAU,CACNc,EAAGd,EAASc,EAAIS,EAAIL,EACpBF,EAAGhB,EAASgB,EAAIG,IAG5B,KAAK,EACD,MAAO,CACHnB,SAAU,CACNc,EAAGd,EAASc,EAAII,EAChBF,EAAGhB,EAASgB,EAAIO,EAAIJ,IAGhC,KAAK,EACD,MAAO,CACHnB,SAAU,CACNc,EAAGd,EAASc,EAAIS,EAAIL,EACpBF,EAAGhB,EAASgB,EAAIG,IAI5B,QACI,MAAO,CACHnB,SAAU,CACNc,EAAGd,EAASc,EAAII,EAChBF,EAAGhB,EAASgB,EAAIO,EAAIJ,IAIxC,CACJ,ECvDG,MAAMK,EACTC,QAAAA,CAASzB,EAAUO,EAAMC,EAAMC,GAC3B,OAAO,IAAIL,EAAoBJ,EAAUO,EAAMC,EAAMC,EACzD,E,kCCJG,MAAMJ,EACTC,WAAAA,CAAYN,EAAUO,EAAMC,EAAMC,GAC9BI,KAAKb,SAAWA,EAChBa,KAAKN,KAAOA,EACZM,KAAKL,KAAOA,EACZK,KAAKJ,QAAUA,CACnB,CACAiB,MAAAA,CAAO1B,EAAUO,GACbM,KAAKb,SAAWA,EAChBa,KAAKN,KAAOA,CAChB,E","sources":["../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n            switch (side) {\n                case 0:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case 1:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case 2:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case 3:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n","import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["randomSquareCoordinate","position","offset","getRandom","halfRandom","EmittersSquareShape","EmitterShapeBase","constructor","size","fill","options","super","init","randomPosition","this","x","width","y","height","halfW","halfH","side","Math","floor","v","EmittersSquareShapeGenerator","generate","resize"],"sourceRoot":""}