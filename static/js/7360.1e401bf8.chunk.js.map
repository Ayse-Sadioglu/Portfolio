{"version":3,"file":"static/js/7360.1e401bf8.chunk.js","mappings":"0KAEA,MAAMA,EAAU,IAAkBC,EAAH,EAAcC,KAAKC,GAC3C,MAAMC,UAA4BC,EAAAA,EACrCC,WAAAA,CAAYC,EAAUC,EAAMC,EAAMC,GAC9BC,MAAMJ,EAAUC,EAAMC,EAAMC,EAChC,CACA,UAAME,GACN,CACAC,cAAAA,GACI,MAAML,EAAOM,KAAKN,KAAMC,EAAOK,KAAKL,KAAMF,EAAWO,KAAKP,UAckEQ,EAAGC,GAAK,CAtBvD,GAsBwDR,EAAKS,MAtB7D,GAsB2ET,EAAKU,QAAgBC,EAdzFC,EAACC,EAAGC,KACpF,MAAMC,GAAIC,EAAAA,EAAAA,MAAcxB,EAASyB,EAAQvB,KAAKwB,KAAMJ,EAAID,EAAKnB,KAAKyB,IAAI1B,EAAWsB,IAAKK,GAAIJ,EAAAA,EAAAA,MAC1F,OAAII,EAAI5B,EACGyB,EAEFG,EAAIC,GACF3B,KAAKC,GAAKsB,EAEZG,EAAIC,IACF3B,KAAKC,GAAKsB,GAGTA,CACZ,EACuLL,CAAcL,EAAGC,GAAIc,GAA7LL,EAAsNN,GAA5NE,EAAsNN,IAAnNO,EAAsNN,GAA/Ld,KAAK6B,MAAMT,EAAIpB,KAAK8B,IAAIP,KAtBI,GAsBoBJ,EAAInB,KAAK+B,IAAIR,KAtBjC,IAsBoLS,EAAezB,EAAOqB,EAAY5B,KAAK6B,MAAKP,EAAAA,EAAAA,OAAeM,EAAtSK,IAACd,EAAGC,EAAGG,EACnB,MAAO,CACHlB,SAAU,CACNc,EAAGd,EAASc,EAAIa,EAAehC,KAAK8B,IAAIb,GACxCG,EAAGf,EAASe,EAAIY,EAAehC,KAAK+B,IAAId,IAGpD,EC9BG,MAAMiB,EACTC,QAAAA,CAAS9B,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAIN,EAAoBG,EAAUC,EAAMC,EAAMC,EACzD,E,kCCJG,MAAML,EACTC,WAAAA,CAAYC,EAAUC,EAAMC,EAAMC,GAC9BI,KAAKP,SAAWA,EAChBO,KAAKN,KAAOA,EACZM,KAAKL,KAAOA,EACZK,KAAKJ,QAAUA,CACnB,CACA4B,MAAAA,CAAO/B,EAAUC,GACbM,KAAKP,SAAWA,EAChBO,KAAKN,KAAOA,CAChB,E","sources":["../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js","../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js"],"sourcesContent":["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return {\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        };\n    }\n}\n","import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n","export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n"],"names":["quarter","doublePI","Math","PI","EmittersCircleShape","EmitterShapeBase","constructor","position","size","fill","options","super","init","randomPosition","this","a","b","width","height","randomTheta","generateTheta","x","y","u","getRandom","theta","atan","tan","v","double","maxRadius","sqrt","cos","sin","randomRadius","radius","EmittersCircleShapeGenerator","generate","resize"],"sourceRoot":""}