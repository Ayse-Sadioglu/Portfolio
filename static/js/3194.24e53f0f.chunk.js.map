{"version":3,"file":"static/js/3194.24e53f0f.chunk.js","mappings":"sJACA,MAAMA,EAAS,EAAGC,EAAO,GAyBzB,SAASC,EAASC,EAASC,EAAMC,EAAQC,EAASC,EAAOC,GACrD,MAA6CC,EAAM,CAC/CC,IADYN,EAAKO,OAASN,EAASJ,GAEnCW,EAAGP,EAASJ,GACbY,EAAWR,EAASL,EACnBQ,EACAL,EAAQW,SAASV,EAAMK,EAAIC,EAAGD,EAAIG,EAAIC,EAAWN,GAGjDJ,EAAQY,WAAWX,EAAMK,EAAIC,EAAGD,EAAIG,EAAIC,EAAWN,EAE3D,CCnCO,MAAMS,EAAa,CAAC,OAAQ,YAAa,OAAQ,kBACjD,MAAMC,EACTC,IAAAA,CAAKC,IDFF,SAAkBA,GAAM,IAAAC,EAAAC,EAAAC,EAC3B,MAAM,QAAEnB,EAAO,SAAEoB,EAAQ,OAAElB,EAAM,QAAEC,GAAYa,EAAMK,EAAYD,EAASE,UAC1E,IAAKD,EACD,OAEJ,MAAME,EAAWF,EAAUG,MAC3B,QAAiBC,IAAbF,EACA,YAEkBE,IAAlBL,EAASM,OACTN,EAASM,MAAOC,EAAAA,EAAAA,IAAyBJ,EAAUH,EAASQ,kBAEhE,MAAMF,EAAON,EAASM,KAAMG,EAAuB,QAAlBZ,EAAGI,EAAUQ,aAAK,IAAAZ,EAAAA,EAAI,GAAIa,EAAyB,QAAnBZ,EAAGG,EAAUS,cAAM,IAAAZ,EAAAA,EAAI,MAAOa,EAAOC,KAAKC,MAAM/B,GAAUL,EAAQqC,EAAqB,QAAjBf,EAAGE,EAAUa,YAAI,IAAAf,EAAAA,EAAI,UAAWd,EAAOe,EAASe,UACjLC,EAAY,OAAJV,QAAI,IAAJA,OAAI,EAAJA,EAAMW,MAAM,MAC1B,GAAKD,EAAL,CAGApC,EAAQkC,KAAO,GAAHI,OAAMT,EAAK,KAAAS,OAAIR,EAAM,KAAAQ,OAAIP,EAAI,QAAAO,OAAOJ,EAAI,KACpDlC,EAAQuC,YAAcpC,EACtB,IAAK,IAAIqC,EAAI,EAAGA,EAAIJ,EAAM5B,OAAQgC,IAC9BzC,EAASC,EAASoC,EAAMI,GAAItC,EAAQC,EAASqC,EAAGnC,GAEpDL,EAAQuC,YAAc,CANtB,CAOJ,CCpBQE,CAASzB,EACb,CACA,UAAM0B,CAAKC,GACP,MAAMC,EAAUD,EAAUE,cAC1B,GAAIhC,EAAWiC,MAAMC,IAAMC,EAAAA,EAAAA,IAAUD,EAAGH,EAAQK,UAAUC,MAAMC,QAAQ,CACpE,MAAMC,EAAevC,EAChBwC,KAAKN,GAAMH,EAAQK,UAAUC,MAAMN,QAAQG,KAC3CD,MAAMC,KAAQA,IAAIO,EAAW,IAClCC,EAAAA,EAAAA,IAA0BH,GAAeF,IACrCI,EAASE,MAAKC,EAAAA,EAAAA,IAASP,EAAMhB,KAAMgB,EAAMpB,QAAQ,UAE/C4B,QAAQC,IAAIL,EACtB,CACJ,CACAM,YAAAA,CAAajB,EAAWvB,GACpB,IAAKA,EAAS8B,QAAUrC,EAAWgD,SAASzC,EAAS8B,OACjD,OAEJ,MAAM7B,EAAYD,EAASE,UAC3B,QAAkBG,IAAdJ,EACA,OAEJ,MAAME,EAAWF,EAAUG,WACVC,IAAbF,IAGJH,EAASM,MAAOC,EAAAA,EAAAA,IAAyBJ,EAAUH,EAASQ,iBAChE,E,4DC/BGkC,eAAeC,EAAcC,GAAwB,IAAhBC,IAAOC,UAAA1D,OAAA,QAAAiB,IAAAyC,UAAA,KAAAA,UAAA,GAC/C,MAAM,WAAEpD,SAAqB,6CACvBkD,EAAOG,SAAStD,EAAAA,EAAY,IAAIC,EAAcmD,EACxD,C","sources":["../node_modules/@tsparticles/shape-text/browser/Utils.js","../node_modules/@tsparticles/shape-text/browser/TextDrawer.js","../node_modules/@tsparticles/shape-text/browser/index.js"],"sourcesContent":["import { itemFromSingleOrMultiple } from \"@tsparticles/engine\";\nconst double = 2, half = 0.5;\nexport function drawText(data) {\n    const { context, particle, radius, opacity } = data, character = particle.shapeData;\n    if (!character) {\n        return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n        return;\n    }\n    if (particle.text === undefined) {\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * double, font = character.font ?? \"Verdana\", fill = particle.shapeFill;\n    const lines = text?.split(\"\\n\");\n    if (!lines) {\n        return;\n    }\n    context.font = `${style} ${weight} ${size}px \"${font}\"`;\n    context.globalAlpha = opacity;\n    for (let i = 0; i < lines.length; i++) {\n        drawLine(context, lines[i], radius, opacity, i, fill);\n    }\n    context.globalAlpha = 1;\n}\nfunction drawLine(context, line, radius, opacity, index, fill) {\n    const offsetX = line.length * radius * half, pos = {\n        x: -offsetX,\n        y: radius * half,\n    }, diameter = radius * double;\n    if (fill) {\n        context.fillText(line, pos.x, pos.y + diameter * index);\n    }\n    else {\n        context.strokeText(line, pos.x, pos.y + diameter * index);\n    }\n}\n","import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawText } from \"./Utils.js\";\nexport const validTypes = [\"text\", \"character\", \"char\", \"multiline-text\"];\nexport class TextDrawer {\n    draw(data) {\n        drawText(data);\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n","import { validTypes } from \"./TextDrawer.js\";\nexport async function loadTextShape(engine, refresh = true) {\n    const { TextDrawer } = await import(\"./TextDrawer.js\");\n    await engine.addShape(validTypes, new TextDrawer(), refresh);\n}\n"],"names":["double","half","drawLine","context","line","radius","opacity","index","fill","pos","x","length","y","diameter","fillText","strokeText","validTypes","TextDrawer","draw","data","_character$style","_character$weight","_character$font","particle","character","shapeData","textData","value","undefined","text","itemFromSingleOrMultiple","randomIndexData","style","weight","size","Math","round","font","shapeFill","lines","split","concat","globalAlpha","i","drawText","init","container","options","actualOptions","find","t","isInArray","particles","shape","type","shapeOptions","map","promises","executeOnSingleOrMultiple","push","loadFont","Promise","all","particleInit","includes","async","loadTextShape","engine","refresh","arguments","addShape"],"sourceRoot":""}