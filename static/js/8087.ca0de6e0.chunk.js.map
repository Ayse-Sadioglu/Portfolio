{"version":3,"file":"static/js/8087.ca0de6e0.chunk.js","mappings":"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","sources":["../node_modules/@tsparticles/plugin-absorbers/browser/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, percentDenominator, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { Absorber } from \"./Options/Classes/Absorber.js\";\nconst squareExp = 2, absorbFactor = 0.033, minOrbitLength = 0, minRadius = 0, minMass = 0, origin = {\n    x: 0,\n    y: 0,\n}, minAngle = 0, double = 2, maxAngle = Math.PI * double, minVelocity = 0;\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.origin;\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * maxAngle;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height), offset = 1, randomOffset = 0.1, randomFactor = 0.2;\n                    particle.absorberOrbit.length = minSize * (offset + (getRandom() * randomFactor - randomOffset));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= minVelocity ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? minVelocity) * container.retina.pixelRatio) / percentDenominator) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, squareExp)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * absorbFactor * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < minOrbitLength)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= minRadius || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= minMass || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(origin.x, origin.y, this.size, minAngle, maxAngle, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"names":["origin","maxAngle","Math","PI","AbsorberInstance","constructor","absorbers","container","options","position","_rangeColorToRgb","_this$initialPosition","_this$initialPosition2","this","_calcPosition","exactPosition","calcPositionOrRandomFromSizeRanged","size","canvas","Vector","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","calcPositionOrRandomFromSize","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","_particle$retina$move","length","getDistance","getPosition","angle","getRandom","destroy","minSize","min","width","height","offset","randomOffset","randomFactor","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","percentDenominator","reduceFactor","addV","addTo","initialPosition","Absorber","load","dragging","name","opacity","getRangeValue","value","mass","density","limit","radius","color","rangeColorToRgb","b","g","r","copy","attract","draggable","mouse","interactivity","clicking","downPosition","pos","dx","dy","distance","getDistances","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","resize","isPointInside"],"sourceRoot":""}